package com.supplier.util;

import java.util.Optional;
import java.util.UUID;

import com.supplier.entity.Inventory;
import com.supplier.entity.Offer;
import com.supplier.entity.WarehouseProduct;
import com.supplier.exception.SupplierNotFoundException;
import com.supplier.mapper.InventoryMapper;
import com.supplier.model.InventoryModel;
import com.supplier.model.WarehouseProductModel;

public class InventoryUtil {

	public static Inventory mapModelToInventory(Optional<InventoryModel> optionalInventoryModel,
			InventoryMapper inventoryMapper) {

		InventoryModel inventoryModel = optionalInventoryModel
				.orElseThrow(() -> new SupplierNotFoundException(SupplierConstant.inventoryErrorMessage));

		Inventory inventory = inventoryMapper.modelToInventory(inventoryModel);

		inventory.setInventoryGuid(UUID.randomUUID().toString());

	}

	public static WarehouseProduct mapModelToWarehouseProduct(Optional<InventoryModel> optionalInventoryModel,InventoryMapper inventoryMapper){
		
		InventoryModel inventoryModel = optionalInventoryModel.orElseThrow(() -> new SupplierNotFoundException(SupplierConstant.inventoryErrorMessage));
		
		Optional<WarehouseProduct> optionalWarehouseProduct = optionalInventoryModel.map(InventoryModel::getWarehouseProductModel)
				.map(WarehouseProductModel->inventoryMapper.modelToInventory(inventoryModel));
		
		WarehouseProduct warehouseProduct = optionalWarehouseProduct.orElseThrow(()->new RuntimeException("No WarehouseProduct Found"));
		
		warehouseProduct.setWarehouseGuid(UUID.randomUUID().toString());
		
		Optional<Offer> optionalOffer = optionalInventoryModel.map(InventoryModel::getWarehouseProductModel)
				.map(WarehouseProductModel::getOfferModel)
				.map(offerModel -> inventoryMapper.modelToOffer(offerModel) );
		
	}
	
	return null;

}

}
