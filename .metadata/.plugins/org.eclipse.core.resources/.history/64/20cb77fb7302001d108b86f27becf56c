package com.supplier.mapper;

import com.supplier.entity.Address;
import com.supplier.entity.Contact;
import com.supplier.entity.Location;
import com.supplier.entity.Warehouse;
import com.supplier.model.AddressModel;
import com.supplier.model.ContactModel;
import com.supplier.model.LocationModel;
import com.supplier.model.WarehouseModel;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2022-07-12T15:53:52+0530",
    comments = "version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 1.4.50.v20210914-1429, environment: Java 17.0.2 (Eclipse Adoptium)"
)
@Component
public class WarehouseMapperImpl implements WarehouseMapper {

    @Override
    public Warehouse modelToWarehouse(WarehouseModel warehouseModel) {
        if ( warehouseModel == null ) {
            return null;
        }

        Warehouse warehouse = new Warehouse();

        warehouse.setWarehouseGuid( warehouseModel.getWarehouseGuid() );
        warehouse.setName( warehouseModel.getName() );
        warehouse.setWarehouseCode( warehouseModel.getWarehouseCode() );

        return warehouse;
    }

    @Override
    public WarehouseModel warehouseToModel(Warehouse warehouse) {
        if ( warehouse == null ) {
            return null;
        }

        WarehouseModel warehouseModel = new WarehouseModel();

        warehouseModel.setWarehouseGuid( warehouse.getWarehouseGuid() );
        warehouseModel.setName( warehouse.getName() );
        warehouseModel.setWarehouseCode( warehouse.getWarehouseCode() );

        return warehouseModel;
    }

    @Override
    public Contact modelToContact(ContactModel contactModel) {
        if ( contactModel == null ) {
            return null;
        }

        Contact contact = new Contact();

        contact.setContactGuid( contactModel.getContactGuid() );
        contact.setValue( contactModel.getValue() );

        return contact;
    }

    @Override
    public ContactModel contactToModel(Contact contact) {
        if ( contact == null ) {
            return null;
        }

        ContactModel contactModel = new ContactModel();

        contactModel.setContactGuid( contact.getContactGuid() );
        contactModel.setValue( contact.getValue() );

        return contactModel;
    }

    @Override
    public Location modelToLocation(LocationModel locationModel) {
        if ( locationModel == null ) {
            return null;
        }

        Location location = new Location();

        location.setLocationGuid( locationModel.getLocationGuid() );
        location.setArea( locationModel.getArea() );
        location.setLocationCode( locationModel.getLocationCode() );

        return location;
    }

    @Override
    public LocationModel locationToModel(Location location) {
        if ( location == null ) {
            return null;
        }

        LocationModel locationModel = new LocationModel();

        locationModel.setLocationGuid( location.getLocationGuid() );
        locationModel.setArea( location.getArea() );
        locationModel.setLocationCode( location.getLocationCode() );

        return locationModel;
    }

    @Override
    public Address modelToAddress(AddressModel addressModel) {
        if ( addressModel == null ) {
            return null;
        }

        Address address = new Address();

        address.setAddressGuid( addressModel.getAddressGuid() );
        address.setAddressLine1( addressModel.getAddressLine1() );
        address.setAddressLine2( addressModel.getAddressLine2() );
        address.setCity( addressModel.getCity() );
        address.setCountry( addressModel.getCountry() );
        address.setPostalCode( addressModel.getPostalCode() );
        address.setState( addressModel.getState() );

        return address;
    }

    @Override
    public AddressModel addressToModel(Address address) {
        if ( address == null ) {
            return null;
        }

        AddressModel addressModel = new AddressModel();

        addressModel.setAddressGuid( address.getAddressGuid() );
        addressModel.setAddressLine1( address.getAddressLine1() );
        addressModel.setAddressLine2( address.getAddressLine2() );
        addressModel.setCity( address.getCity() );
        addressModel.setCountry( address.getCountry() );
        addressModel.setPostalCode( address.getPostalCode() );
        addressModel.setState( address.getState() );

        return addressModel;
    }
}
